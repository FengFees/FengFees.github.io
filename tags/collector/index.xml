<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>collector on 浙大SEL实验室</title>
    <link>https://fengfees.github.io/tags/collector/</link>
    <description>Recent content in collector on 浙大SEL实验室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 07 May 2014 10:19:45 +0000</lastBuildDate>
    
	<atom:link href="https://fengfees.github.io/tags/collector/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cloud Foundry中collector组件的源码分析</title>
      <link>https://fengfees.github.io/blog/cloud-foundry%E4%B8%ADcollector%E7%BB%84%E4%BB%B6%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 07 May 2014 10:19:45 +0000</pubDate>
      
      <guid>https://fengfees.github.io/blog/cloud-foundry%E4%B8%ADcollector%E7%BB%84%E4%BB%B6%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>在Cloud Foundry中有一个叫collector的组件，该组件的功能是通过消息总线发现在Cloud Foundry中注册过的各个组件的信息，然后通过varz和healthz接口来查询它们的信息并发送到指定的存储位置。 本文从collector的功能出发，主要讲述以上两个功能的源码实现。
发现注册组件 在Cloud Foundry中，每个组件在启动的时候后会以一个component的形式向Cloud Foundry注册，同时也会作为一个组件，向NATS发布一些启动信息。 首先以DEA为例，讲述该组件register与向NATS publish信息的实现。首先看以下/dea/lib/dea/agent.rb中register的代码： [plain] view plaincopy在CODE上查看代码片派生到我的代码片
VCAP::Component.register(:type =&amp;gt; &#39;DEA&#39;, :host =&amp;gt; @local_ip, :index =&amp;gt; @config[&#39;index&#39;], :config =&amp;gt; @config, :port =&amp;gt; status_config[&#39;port&#39;], :user =&amp;gt; status_config[&#39;user&#39;], :password =&amp;gt; status_config[&#39;password&#39;])  这段代码表示，DEA通过VCAP::Component对象中的register方法，实现注册。以下进入vcap-common/lib/vcap/component.rb中的register方法： [ruby] view plaincopy在CODE上查看代码片派生到我的代码片
def register(opts) uuid = VCAP.secure_uuid …… auth = [opts[:user] || VCAP.secure_uuid, opts[:password] || VCAP.secure_uuid] @discover = { :type =&amp;gt; type, …… :credentials =&amp;gt; auth, :start =&amp;gt; Time.now } …… @healthz = &amp;quot;ok\n&amp;quot;.</description>
    </item>
    
  </channel>
</rss>